%matlab script for exercise 6(edge detection)
%algorithm:
%1) apply both sobel kernels to the image
%2)global thresholding the output to get edge detection image using only the sobel
%gradient estimator
%3)Apply the hough transform method and compare results

%reading the image and preprocessing
clock = imread("clock.jpg");
figure;
imshow(clock)
clock = rgb2gray(clock);
clock = clock(:,2:end);
figure;
imshow(clock)
%scaling to [0-1] intenisty levels
%clock = im2double(clock);
sobel =  fspecial("sobel");
%sobel filter application
clock_sobel_vertical = imfilter(clock,-sobel,"same","conv");
clock_sobel_horizontal  = imfilter(clock,-sobel',"same","conv");
clock_sobel_final = abs(clock_sobel_vertical)+abs(clock_sobel_horizontal);
%dispalying result of sobel
figure;
imshow(clock_sobel_final,[]);
title("sobel filtered output");


figure(1);
subplot(2, 2, 1), imshow(clock, []), title('Initial Image Clock')
subplot(2, 2, 2), imshow(clock_sobel_vertical, []), title('|G_x| Sobel kernel to identify edges in the vertical direction')
subplot(2, 2, 3), imshow(clock_sobel_horizontal, []), title('|G_y| Sobel kernel to identify edges in the horizontal direction')
subplot(2, 2, 4), imshow(clock_sobel_final, []), title('|G_x| Sobel kernel to identify edges in the vertical direction')
print(gcf, '-dpng', 'Erotima6_png/erwtima6_1_Sobel.png');

%%
%application of global threshold
figure;
histogram(clock_sobel_final),title("Histogram of magnitude image after sobel kernels");
print(gcf, '-dpng', 'Erotima6_png/erwtima6_2_1_Sobel.png');
clock_sobel_final_thresholded= clock_sobel_final;
clock_sobel_final_thresholded_1= clock_sobel_final;
clock_sobel_final_thresholded(clock_sobel_final_thresholded<25)=0;
clock_sobel_final_thresholded_1(clock_sobel_final_thresholded_1<50)=0;
clock_sobel_final_thresholded(clock_sobel_final_thresholded>0)=1;
clock_sobel_final_thresholded_1(clock_sobel_final_thresholded_1>0)=1;
binary_image = clock_sobel_final_thresholded_1;

%dispalying result of sobel
figure;
subplot(1, 2, 1), imshow(clock_sobel_final_thresholded, []), title('Thresolded image with threshold 25')
subplot(1, 2, 2), imshow(clock_sobel_final_thresholded_1, []), title('Thresolded image with threshold 50')
print(gcf, '-dpng', 'Erotima6_png/erwtima6_2_2_Sobel.png');
%%
%Hough transform in order to find area boundaris by using common edges
%step 1: Obtaining binary image, with foreground pixels only, as generated by the previous procedure.(other options canny's algorithm)

binary_image = clock_sobel_final_thresholded;
binary_image(binary_image>0)=1;
size_of_binary = size(binary_image);
%step 2: obtaining foreground pixel indexes
 [rows,cols]= find(binary_image==1);
 foreground_indexes = [ rows cols];
%step 3: Define your parametric space and accumulator matrix
%r values are selected as pixel granular in the [-maximum_distance_of_pixels,maximum_distance_of_pixels]
%while u values are selected as unitary distant in [-90 ,90]
u = -90:1:89;
d = ceil(sqrt((size_of_binary(1)-1)^2 + ((size_of_binary(2)-1)^2)));
r =  -d:1:d;
accumulator_matrix = zeros(length(r),length(u));%arbitrary but we are following the books guidelines
%compute accumulator matrix values
for index  =  1:length(foreground_indexes)
    for angle= 1:length(u)
        indexes = foreground_indexes(index,:);
        r_computed_value = round(indexes(1)*cosd(u(angle))+indexes(2)*sind(u(angle)));
        if(~isempty(find(r==r_computed_value,1)))
            accumulator_matrix(find(r==r_computed_value),angle) = accumulator_matrix(find(r==r_computed_value),angle) +1 ;
        end
    end
end
%%
[matlab_accumulator,theta,rho]=hough(binary_image,RhoResolution=1);
% binary_output_image = zeros(size_of_binary);
% M = sort(accumulator_matrix(:),'descend');
% M=M(1:10);
% for m = 1:length(M)
%     [row,col]=find(accumulator_matrix==M(m),1);
%
%     for i=1:size_of_binary(1)
%         for j=1:size_of_binary(2)
%             if(round(i*cosd(u(col))+j*sind(u(col)))==r(row))
%                 binary_output_image(i,j)=1;
%             end
%         end
%     end
% end
% result = 255*double(binary_output_image) + double(clock_sobel_final_thresholded);
% imshow(result,[])


%Display the transform, H, returned by the hough function.
  accumulator_matrix=matlab_accumulator ;
   r= rho;
  u = theta;
  figure;
imshow(imadjust(rescale(accumulator_matrix)),[],...
       'XData',u,...
       'YData',r,...
       'InitialMagnification','fit');
xlabel('\theta (degrees)')
ylabel('\rho')
axis on
axis normal
hold on
colormap(gca,hot)

%Find the peaks in the Hough transform matrix, accumulator_matrix, using the houghpeaks function.
accumulator_peaks = houghpeaks(accumulator_matrix,30,'threshold',ceil(0.1*max(accumulator_matrix(:))));

%Superimpose a plot on the image of the transform that identifies the peaks.
x = u(accumulator_peaks(:,2));
y = r(accumulator_peaks(:,1));
plot(x,y,'s','color','black');
title("Colored hough transform of Image gradient magnitude thresholded. Cubes are selected peaks");




print(gcf, '-dpng', 'Erotima6_png/erwtima6_3_1_Sobel.png');
%Find lines in the image using the houghlines function.
lines = houghlines(binary_image,u,r,accumulator_peaks,'FillGap',5,'MinLength',7);

%Create a plot that displays the original image with the lines superimposed on it.
figure; subplot(2,2,1), imshow(clock), title('Initial Image Clock with superimposed lines'), hold on
max_len = 0;
for k = 1:length(lines)
   xy = [lines(k).point1; lines(k).point2];
   plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','white');

%    % Plot beginnings and ends of lines
%    plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');
%    plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');

   % Determine the endpoints of the longest line segment
   len = norm(lines(k).point1 - lines(k).point2);
   if ( len > max_len)
      max_len = len;
      xy_long = xy;
   end
end







subplot(2, 2, 2), imshow(clock_sobel_final_thresholded_1, []), title('Thresholded gradient image')
subplot(2,2, 3), imshow(clock), title('Initial Image Clock')

print(gcf, '-dpng', 'Erotima6_png/erwtima6_3_2_Sobel.png');
